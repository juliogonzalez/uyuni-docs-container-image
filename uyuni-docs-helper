#!/bin/bash

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

# Language (force it so getopt messages are always in english, as the script)
LANG=en_EN

# Get script name
SCRIPT=$(basename ${0})

# By default, do not serve the doc using HTTP
SERVE=0

PROJECT='uyuni-project'

# Default tag
TAG='main'

# Default Git repository
GITREPO='https://github.com/uyuni-project/uyuni-docs.git'

# Default Git reference
GITREF='master'

print_info() {
  echo -e "\033[1;36m[INFO] ${1}\033[0m"
}

print_error() {
  echo -e "\033[1;31m[ERROR] ${1}\033[0m"
}

print_ok() {
  echo -e "\033[1;32m[INFO] ${1}\033[0m"
}

print_incorrect_syntax() {
  print_error "Incorrect syntax: ${1} (use ${SCRIPT} -h for help)"
  exit 1
}

print_help() {
  echo ""
  echo "Build the Uyuni doc using a container and (optionally) serve it for verification via HTTP"
  echo ""
  echo "Syntax: "
  echo ""
  echo "${SCRIPT} <ARGUMENTS>"
  echo ""
  echo "Mandatory arguments:"
  echo ""
  echo "-p|--product <uyuni|mlm|suma>   Build the documentation for Uyuni, SUSE Multi-Linux Manager, or SUMA"
  echo "-c|--command <make command> Use the desired command to build html/pdf, html&pdf, etc..."
  echo "                            for example: 'all-uyuni'. You can use 'help' to list all"
  echo "                            possible commands. Be aware you still need to specify"
  echo "                            one source for this to work"
}

# Read command-line options
ARGS=$(getopt -o hg:r:l:o:p:c:t:j:s --long help,gitrepo:,gitref:,localclone:,output:,product:,command:,tag:,project:,serve -n "${SCRIPT}" -- "$@")
if [ $? -ne 0 ]; then
  print_incorrect_syntax "Invalid getopt call, notify this to the script maintainers"
fi

eval set -- "${ARGS}"

# Extract options into variables
while true; do
  case "$1" in
    -h|--help)       print_help; exit 1;;
    -g|--gitrepo)    GITREPO="$2"; shift 2;;
    -r|--gitref)     GITREF="$2"; shift 2;;
    -l|--localclone) LOCALCLONE="$2"; shift 2;;
    -o|--output)     OUTPUT="$2"; shift 2;;
    -p|--product)    PRODUCT="$2"; shift 2;;
    -c|--command)    COMMAND="$2"; shift 2;;
    -t|--tag)        TAG="$2"; shift 2;;
    -j|--project)    PROJECT="$2"; shift 2;;
    -s|--serve)      SERVE=1; shift 1;;
    --)              shift; break;;
    *)               print_incorrect_syntax "Invalid arguments in the call"; exit 1;;
  esac
done

# Ensure product is specified
if [ -z ${PRODUCT} ]; then
    print_incorrect_syntax "Product (-p) is mandatory"
fi

# Image
IMAGE="ghcr.io/${PROJECT}/uyuni-docs-helper:${TAG}"

print_info "Pulling the latest container image ${IMAGE}..."
podman pull ${IMAGE}

if [ ${SERVE} -eq 1 ] && [ "${COMMAND}" != "help" ]; then
 print_info "The documentation will be served via HTTP. To stop the container when you are done, use CTRL+C"
fi

if [ "${COMMAND}" == "help" ]; then
  print_info "Showing the help..."
else
  print_info "Building the documentation..."
fi

podman run -ti --rm -e GITREPO=${GITREPO} -e GITREF=${GITREF} -e PRODUCT=${PRODUCT} -e COMMAND=${COMMAND} ${IMAGE}
RET=$?

if [ ${RET} -ne 0 ]; then
  print_error "Invalid product. Allowed: Master: uyuni, mlm | Non Master branches: uyuni, suma"
  exit ${RET}
fi

print_info "Build completed successfully."
exit 0
