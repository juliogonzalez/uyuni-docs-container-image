#!/bin/bash

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

LANG=en_EN

SCRIPT=$(basename ${0})
SERVE=0
PROJECT='uyuni-project'
TAG='main'
GITREPO='https://github.com/uyuni-project/uyuni-docs.git'
GITREF='master'  # Default branch is master
PRODUCT='uyuni'  # Default product is uyuni

print_help() {
  echo -e "\nUsage: ${SCRIPT} [OPTIONS]\n"
  echo "Build the Uyuni documentation using a container."
  echo -e "\nOptions:"
  echo "  -h, --help               Show this help message and exit"
  echo "  -g, --gitrepo <repo>     Specify the Git repository (default: ${GITREPO})"
  echo "  -r, --gitref <ref>       Specify the Git branch or tag (default: ${GITREF})"
  echo "  -l, --localclone <path>  Use a local clone of the Uyuni docs repository"
  echo "  -o, --output <path>      Specify an output directory"
  echo "  -p, --product <name>     Choose a product: uyuni, mlm, suma"
  echo "  -c, --command <cmd>      Build command (e.g., all-uyuni, all-mlm)"
  echo "  -t, --tag <tag>          Container image tag (default: ${TAG})"
  echo "  -j, --project <project>  Specify a GitHub project"
  echo "  -s, --serve              Serve the documentation via HTTP after building"
  echo -e "\nExamples:"
  echo "  ${SCRIPT} -l /path/to/uyuni-docs -p mlm -c all-mlm"
  echo "  ${SCRIPT} -g https://github.com/uyuni-project/uyuni-docs.git -p uyuni -c all-uyuni"
}

getopt_for_macos() {
  if [ "$(uname -s)" == 'Darwin' ]; then
    if [ ! -f /usr/local/opt/gnu-getopt/bin/getopt ]; then
      print_error "Please install gnu-getopt via Homebrew with: brew install gnu-getopt"
      exit 1
    else
      export PATH="$(brew --prefix gnu-getopt)/bin:$PATH"
    fi
  fi
}

print_error() {
  echo -e "\033[1;31m[ERROR] ${1}\033[0m"
}

print_info() {
  echo -e "\033[1;36m[INFO] ${1}\033[0m"
}

print_incorrect_syntax() {
  print_error "Incorrect syntax: ${1} (use ${SCRIPT} -h for help)"
  exit 1
}

getopt_for_macos
ARGS=$(getopt -o hg:r:l:o:p:c:t:j:s --long help,gitrepo:,gitref:,localclone:,output:,product:,command:,tag:,project:,serve -n "${SCRIPT}" -- "$@")
if [ $? -ne 0 ]; then
  print_incorrect_syntax "Invalid getopt call"
fi

eval set -- "${ARGS}"
while true; do
  case "${1}" in
    -h|--help) print_help; exit 1;;
    -g|--gitrepo) GITREPO="${2}"; shift 2;;
    -r|--gitref) GITREF="${2}"; shift 2;;
    -l|--localclone) LOCALCLONE="${2}"; shift 2;;
    -o|--output) OUTPUT="${2}"; shift 2;;
    -p|--product) PRODUCT="${2}"; shift 2;;
    -c|--command) COMMAND="${2}"; shift 2;;
    -t|--tag) TAG="${2}"; shift 2;;
    -j|--project) PROJECT="${2}"; shift 2;;
    -s|--serve) SERVE=1; PORTS='-p 8000:8000'; shift 1;;
    --) shift; break;;
    *) print_incorrect_syntax "Invalid arguments"; exit 1;;
  esac
done

# Validate product selection based on the branch
if [ "${GITREF}" == "master" ]; then
  if [[ "${PRODUCT}" != "uyuni" && "${PRODUCT}" != "mlm" ]]; then
    print_error "Invalid product for master branch. Allowed: uyuni, mlm"
    exit 1
  fi
else
  if [[ "${PRODUCT}" != "uyuni" && "${PRODUCT}" != "suma" ]]; then
    print_error "Invalid product for non-master branches. Allowed: uyuni, suma"
    exit 1
  fi
fi

# Determine output directory
if [ -n "${LOCALCLONE}" ]; then
  OUTPUT_DIR="$(realpath ${LOCALCLONE})/build"
elif [ -n "${OUTPUT}" ]; then
  OUTPUT_DIR="$(realpath ${OUTPUT})/build"
else
  OUTPUT_DIR="$(realpath /home/docs/uyuni-docs)/build"
fi

IMAGE="ghcr.io/${PROJECT}/uyuni-docs-helper:${TAG}"

if [ -z ${COMMAND} ]; then
  print_incorrect_syntax "-c is mandatory"
fi

print_info "Pulling the latest container image ${IMAGE}..."
podman pull ${IMAGE}
print_info "Building the doc..."
mkdir -p ${OUTPUT_DIR} && chmod 777 ${OUTPUT_DIR} && podman run -ti --rm --userns=keep-id --user $(id -u):$(id -g) -v ${OUTPUT_DIR}:/tmp/output:z -e GITREF=${GITREF} -e PRODUCT=${PRODUCT} -e COMMAND=${COMMAND} -e SERVE=${SERVE} ${PORTS} ${IMAGE}
RET=$?

if [ ${RET} -eq 0 ]; then
    chown -R $(id -u):$(id -g) ${OUTPUT_DIR} && print_info "Build successful. Output is available at: ${OUTPUT_DIR}"
else
   print_error "Build failed. Check logs."
fi

exit ${RET}
