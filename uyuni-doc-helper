#!/bin/bash

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

# Language (force it so getopt messages are always in english, as the script)
LANG=en_EN

# Get script name
SCRIPT=$(basename ${0})

# By default, do not serve the doc using HTTP
SERVE=0

# Image
IMAGE='docker.io/juliogonzalez/uyuni-docs'

print_info() {
  echo -e "\033[1;36m[INFO] ${1}\033[0m"
}

print_error() {
  echo -e "\033[1;31m[ERROR] ${1}\033[0m"
}

print_ok() {
  echo -e "\033[1;32m[INFO] ${1}\033[0m"
}

print_incorrect_syntax() {
  print_error "Incorrect syntax. Use ${SCRIPT} -h for help"
  exit 1
}

print_help() {
  echo ""
  echo "Build the Uyuni doc using a container and (optionally) serve it for verification via HTTP"
  echo ""
  echo "Syntax: "
  echo ""
  echo "${SCRIPT} <ARGUMENTS>"
  echo ""
  echo "Mandatory arguments:"
  echo ""
  echo "-p|--product <uyuni|suma>   Build the documentation for either Uyuni or SUSE Manager"
  echo "-c|--command <make command> Use the desired command to build html/pdf, html&pdf, etc..."
  echo "                            for example: 'all-uyuni'. You can use 'help' to list all"
  echo "                            possible commands"
  echo ""
  echo "${SCRIPT} can build documentation from two sources. Different parameters apply for each case"
  echo ""
  echo "Remote Git repository:"
  echo "-g|--gitrepo <REPOSITORY> A path to a HTTP git repository where the code for the"
  echo "                          documentation is."
  echo "                          If the value does not start with 'https://'"
  echo "                          then the value is considered as a GitHUb user/organization and"
  echo "                          the URL in the form https://github.com/<REPOSITORY>/uyuni-docs.git"
  echo "                          will be used"
  echo "                          If not specified at all, the default value will be"
  echo "                          https://github.com/uyuni-project/uyuni-docs.git"
  echo "-r|--gitref <REFERENCE>   A git branch (master by default)"
  echo "-o|--output <PATH>        A patch to store the output of the build. A directory 'build' will"
  echo "                          be created inside. Optional"
  echo ""
  echo "Local Git repository:"
  echo "-l|--localclone <GIT_CLONE> A path to a local git repository. The output of the build will"
  echo "                            be placed inside this path as a 'build' directory"
  echo ""
  echo "Optional arguments:"
  echo "-s|--serve               Start a HTTP server at the end of the build so the"
  echo "                         documentation can be inspected (disabled by default)"
}

# read the options
ARGS=$(getopt -o hg:r:l:o:p:c:s --long help,gitrepo:,gitref:,localclone:,output:,product:,command:,serve -n "${SCRIPT}" -- "$@")
if [ $? -ne 0 ];
then
  print_incorrect_syntax
fi
eval set -- "${ARGS}"

# extract options and their arguments into variables
while true ; do
  case "${1}" in
    -h|--help)       print_help; exit 1;;
    -g|--gitrepo)    GITREPO="${2}"; shift 2;;
    -r|--gitref)     GITREF="${2}"; shift 2;;
    -l|--localclone) LOCALCLONE="${2}"; shift 2;;
    -o|--output)     OUTPUT="${2}"; shift 2;;
    -p|--product)    PRODUCT="${2}"; shift 2;;
    -c|--command)    COMMAND="${2}"; shift 2;;
    -s|--serve)       SERVE=1; shift 1;;
    --)              shift ; break ;;
    *)               print_incorrect_syntax; exit 1;;
  esac
done

# Product are command are mandatory
if [ -z ${PRODUCT} -o -z ${COMMAND} ]; then
  print_incorrect_syntax
fi

# Either a remote source or a local one must be used
if [ -z ${LOCALCLONE} ]; then
  if [ -z ${GITREPO} ]; then
    print_incorrect_syntax
  fi
  if [ -z ${GITREF} ]; then
    # Default Git reference
    GITREF='master'
  fi
  SOURCE="-e GITREPO=${GITREPO} -e GITREF=${GITREF}"
  if [ ! -z ${OUTPUT} ]; then
    if [ ! -d ${OUTPUT} ]; then
      print_error "${OUTPUT} is not a directory or does not exist"
      exit 2
    else
      SOURCE="${SOURCE} -v ${OUTPUT}:/tmp/output --userns=keep-id"
      print_info "Output will be stored at ${OUTPUT}/build"
      OUTDIR="${OUTPUT}/build"
    fi
  fi
else
  if [ ! -z ${OUTPUT} ]; then
    print_incorrect_syntax
  fi
  if [ ! -z ${GITREPO} ] || [ ! -z ${GITREF} ]; then
    print_incorrect_syntax
  fi
  if [ ! -d ${LOCALCLONE} ]; then
    print_error "${LOCALCLONE} is not a directory or does not exist"
    exit 2
  else
    SOURCE="-v ${LOCALCLONE}:/tmp/uyuni-docs --userns=keep-id"
    print_info "Output will be stored at ${LOCALCLONE}/build"
    OUTDIR="${LOCALCLONE}/build"
  fi
fi

# Guess the GitHub URL
if [[ ! "${GITREPO}" =~ ^https:// ]]; then
    GITREPO="https://github.com/${GITREPO}/uyuni-docs.git"
fi

if [ -z ${LOCALCLONE} ]; then
  SOURCE="${SOURCE} -e GITREPO=${GITREPO} -e GITREF=${GITREF}"
  fi

print_info "Pulling the latest contaimer image..."
podman pull ${IMAGE}
if [ ${SERVE} -eq 1 ]; then
 print_info "The documentation will be served via HTTP. To stop the container when you are done, use CTRL+C"
fi
print_info "Bulding the doc..."
podman run -ti --rm ${SOURCE} -e PRODUCT=${PRODUCT} -e COMMAND=${COMMAND} -e SERVE=${SERVE} -p 8000:8000 ${IMAGE}
RET=${?}

if [ ! -z ${OUTDIR} ]; then
    print_info "You can find find the build output at ${OUTDIR}"
fi

if [ ${RET} -ne 0 ]; then
   print_error "There were errors! Please review the log!"
   exit ${RET}
fi
